--Ejecutar dentro de sqlplus / as sysdba
ALTER session set "_ORACLE_SCRIPT"=true;
CREATE USER inventario IDENTIFIED BY DBFide1;

GRANT create session TO inventario;
GRANT create table TO inventario;
GRANT create view TO inventario;
GRANT create any trigger TO inventario;
GRANT create any procedure TO inventario;
GRANT create sequence TO inventario;
GRANT create synonym TO inventario;
GRANT create trigger TO inventario;

--Permisos para INSERT https://stackoverflow.com/a/21671145
ALTER USER inventario quota unlimited on USERS;

------------------------------------------------------------
-- Ejecutar en SQLDEVELOPER
-- Tabla "CATEGORÍAS"
CREATE TABLE CATEGORIAS (
ID_CATEGORIA INT PRIMARY KEY,
NOMBRE_CATEGORIA VARCHAR(100)
);

-- Tabla "EQUIPOS"
CREATE TABLE EQUIPOS (
ID_EQUIPO INT PRIMARY KEY,
NOMBRE_EQUIPO VARCHAR(100),
DESCRIPCION VARCHAR(200),
NUM_SERIE VARCHAR(50),
CANTIDAD_DISPONIBLE INT,
CATEGORIA INT,
FOREIGN KEY (CATEGORIA) REFERENCES CATEGORIAS(ID_CATEGORIA)
);

-- Tabla "DEPARTAMENTOS"
CREATE TABLE DEPARTAMENTOS (
ID_DEPARTAMENTO INT PRIMARY KEY,
NOMBRE_DEPARTAMENTO VARCHAR(100)
);

-- Tabla "PERSONAL"
CREATE TABLE PERSONAL (
ID_PERSONAL INT PRIMARY KEY,
NOMBRE VARCHAR(100),
TELEFONO VARCHAR(20),
CORREO VARCHAR(100),
ID_DEPARTAMENTO INT,
FOREIGN KEY (ID_DEPARTAMENTO) REFERENCES DEPARTAMENTOS(ID_DEPARTAMENTO)
);

CREATE SEQUENCE personal_seq START WITH 1;

-- Tabla "ROLES"
CREATE TABLE ROLES (
ID_ROL INT PRIMARY KEY,
NOMBRE VARCHAR(100),
DESCRIPCION VARCHAR(200)
);

-- Tabla "PERMISOS"
CREATE TABLE PERMISOS (
ID_PERMISOS INT PRIMARY KEY,
NOMBRE VARCHAR(100),
ID_ROL INT,
DESCRIPCION VARCHAR(200),
FOREIGN KEY (ID_ROL) REFERENCES ROLES(ID_ROL)
);

-- Tabla "PROVEEDORES"
CREATE TABLE PROVEEDORES (
ID_PROVEEDOR INT PRIMARY KEY,
NOMBRE VARCHAR(100),
TELEFONO VARCHAR(20),
CORREO VARCHAR(100)
);

-- Tabla "RECEPCIONES"
CREATE TABLE RECEPCIONES (
ID_RECEPCION INT PRIMARY KEY,
ID_EQUIPO INT,
ID_ALMACEN INT,
FECHA DATE,
HORA TIMESTAMP,
FOREIGN KEY (ID_EQUIPO) REFERENCES EQUIPOS(ID_EQUIPO),
FOREIGN KEY (ID_ALMACEN) REFERENCES ALMACENES(ID_ALMACEN)
);

-- Tabla "ALMACENES"
CREATE TABLE ALMACENES (
ID_ALMACEN INT PRIMARY KEY,
ID_RECEPCION INT,
ID_EQUIPO INT,
NOMBRE_ALMACEN VARCHAR(100),
FOREIGN KEY (ID_EQUIPO) REFERENCES EQUIPOS(ID_EQUIPO)
);

-- Tabla "DESPACHOS"
CREATE TABLE DESPACHOS (
ID_DESPACHO INT PRIMARY KEY,
ID_EQUIPO INT,
ID_DEPARTAMENTO INT,
FECHA DATE,
HORA TIMESTAMP,
ID_PERSONAL INT,
FOREIGN KEY (ID_EQUIPO) REFERENCES EQUIPOS(ID_EQUIPO),
FOREIGN KEY (ID_DEPARTAMENTO) REFERENCES DEPARTAMENTOS(ID_DEPARTAMENTO),
FOREIGN KEY (ID_PERSONAL) REFERENCES PERSONAL(ID_PERSONAL)
);

-- Tabla "USUARIOS"
CREATE TABLE USUARIOS (
ID_USUARIOS INT PRIMARY KEY,
ID_PERSONAL INT,
USERNAME VARCHAR(100),
PASSWORD VARCHAR(100),
ID_ROL INT,
FOREIGN KEY (ID_PERSONAL) REFERENCES PERSONAL(ID_PERSONAL),
FOREIGN KEY (ID_ROL) REFERENCES ROLES(ID_ROL)
);

-- Tabla "COMPRA"
CREATE TABLE COMPRA (
ID_COMPRA INT PRIMARY KEY,
ID_PROVEEDOR INT,
FECHA_COMPRA DATE,
ID_DETALLE_COMPRA INT,
FOREIGN KEY (ID_PROVEEDOR) REFERENCES PROVEEDORES(ID_PROVEEDOR),
FOREIGN KEY (ID_DETALLE_COMPRA) REFERENCES DETALLE_COMPRA(ID_DETALLE_COMPRA)
);

-- Tabla "DETALLE_COMPRA"
CREATE TABLE DETALLE_COMPRA (
ID_DETALLE_COMPRA INT PRIMARY KEY,
MATERIAL VARCHAR(100),
CANTIDAD INT,
PRECIO_UNITARIO DECIMAL(10,2)
);

--SECCION DE INSERTS
--CATEGORIAS
INSERT INTO CATEGORIAS (ID_CATEGORIA, NOMBRE_CATEGORIA)
VALUES (1, 'Categoría 1');

INSERT INTO CATEGORIAS (ID_CATEGORIA, NOMBRE_CATEGORIA)
VALUES (2, 'Categoría 2');


CREATE VIEW VIEW_DETALLE_COMPRA AS
SELECT ID_DETALLE_COMPRA, MATERIAL, CANTIDAD, PRECIO_UNITARIO, CANTIDAD * PRECIO_UNITARIO AS TOTAL
FROM DETALLE_COMPRA;


CREATE OR REPLACE PROCEDURE procedure_read_detalle_compra(
	   o_c_dbuser OUT SYS_REFCURSOR)
    AS
    BEGIN

      OPEN o_c_dbuser FOR
      SELECT * FROM view_detalle_compra;

    END;

CREATE OR REPLACE PROCEDURE procedure_create_personal(
    p_nombre IN PERSONAL.NOMBRE%TYPE,
    o_c_dbuser OUT SYS_REFCURSOR
)
AS
BEGIN
    INSERT INTO PERSONAL (NOMBRE, TELEFONO, CORREO, ID_DEPARTAMENTO)
    VALUES (p_nombre, '123456789', 'example@example.com', 2);

    OPEN o_c_dbuser FOR
    SELECT *
    FROM PERSONAL
    WHERE NOMBRE = p_nombre;
END;

CREATE OR REPLACE PROCEDURE procedure_read_personal(
    o_c_dbuser OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN o_c_dbuser FOR
    SELECT *
    FROM PERSONAL;
END;


CREATE OR REPLACE PROCEDURE procedure_update_personal(
    p_id_personal IN PERSONAL.ID_PERSONAL%TYPE,
    p_nombre IN PERSONAL.NOMBRE%TYPE,
    p_telefono IN PERSONAL.TELEFONO%TYPE,
    p_correo IN PERSONAL.CORREO%TYPE,
    p_id_departamento IN PERSONAL.ID_DEPARTAMENTO%TYPE,
    o_c_dbuser OUT SYS_REFCURSOR
)
AS
BEGIN
    UPDATE PERSONAL
    SET NOMBRE = p_nombre,
        TELEFONO = p_telefono,
        CORREO = p_correo,
        ID_DEPARTAMENTO = p_id_departamento
    WHERE ID_PERSONAL = p_id_personal;

    OPEN o_c_dbuser FOR
    SELECT *
    FROM PERSONAL
    WHERE ID_PERSONAL = p_id_personal;
END;

CREATE OR REPLACE PROCEDURE procedure_delete_personal(
    p_id_personal IN PERSONAL.ID_PERSONAL%TYPE,
    o_c_dbuser OUT SYS_REFCURSOR
)
AS
BEGIN
    DELETE FROM PERSONAL
    WHERE ID_PERSONAL = p_id_personal;

    OPEN o_c_dbuser FOR
    SELECT *
    FROM PERSONAL
    WHERE ID_PERSONAL = p_id_personal;
END;


ROLLBACK;

COMMIT;


--SECCION DE TRIGGER
-- TABLA EQUIPOS
CREATE OR REPLACE TRIGGER equipos_trigger
BEFORE INSERT ON equipos
FOR EACH ROW
BEGIN

-- Valor de CANTIDAD_DISPONIBLE a 0 si es negativo
IF :NEW.CANTIDAD_DISPONIBLE < 0 THEN
:NEW.CANTIDAD_DISPONIBLE := 0;
END IF;
END;

-- TABLA ALMACENES
CREATE OR REPLACE TRIGGER almacenes_trigger
BEFORE INSERT ON almacenes
FOR EACH ROW
BEGIN

-- Valor de NOMBRE_ALMACEN a 'Almacén sin nombre' si es NULL
IF :NEW.NOMBRE_ALMACEN IS NULL THEN
:NEW.NOMBRE_ALMACEN := 'Almacén sin nombre';
END IF;
END;

-- Tabla RECEPCIONES 
CREATE OR REPLACE TRIGGER recepciones_trigger
BEFORE INSERT ON recepciones
FOR EACH ROW
BEGIN

-- HORA a CURRENT_TIMESTAMP timestamp si es NULL
IF :NEW.HORA IS NULL THEN
:NEW.HORA := CURRENT_TIMESTAMP;
END IF;
END;

--TABLA PERSONAL
--https://chartio.com/resources/tutorials/how-to-define-an-auto-increment-primary-key-in-oracle/
CREATE OR REPLACE TRIGGER personal_trigger
BEFORE INSERT ON personal
FOR EACH ROW
BEGIN
  SELECT personal_seq.nextval
  INTO :new.ID_PERSONAL
  FROM dual;
END;
--FOR EACH ROW
--BEGIN
--    IF :NEW.TELEFONO IS NULL THEN
--        :NEW.TELEFONO := 'Sin teléfono';
--    END IF;
--END; 

--TABLA PROVEEDORES
CREATE OR REPLACE TRIGGER proveedores_trigger
BEFORE INSERT ON proveedores
FOR EACH ROW
BEGIN
    -- Cambiar CORREO a 'N/A' si es NULL
    IF :NEW.CORREO IS NULL THEN
        :NEW.CORREO := 'N/A';
    END IF;
END;
